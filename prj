#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 9
#define SUBGRID 3
#define NUM_HINTS 40  
#define NUM_BOARDS 10 

void initializeBoard(int board[SIZE][SIZE]) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            board[i][j] = 0;
        }
    }
}


void printBoard(int board[SIZE][SIZE]) {
    int i, j;
    printf("  -----------------------\n");
    
    for (i = 0; i < SIZE; i++) {
        if (i % SUBGRID == 0 && i != 0) {
            printf("  -----------------------\n");
        }
        printf(" | ");
        for (j = 0; j < SIZE; j++) {
            if (j % SUBGRID == 0 && j != 0) {
                printf("| ");
            }
            if (board[i][j] == 0) {
                printf(". ");
            } else {
                printf("%d ", board[i][j]);
            }
        }
        printf("|\n");
    }
    printf("  -----------------------\n");
}


int isValidMove(int board[SIZE][SIZE], int row, int col, int num) {
    int i, j;
    
 
    for (j = 0; j < SIZE; j++) {
        if (j != col && board[row][j] == num) {
            return 0; 
        }
    }
    
    for (i = 0; i < SIZE; i++) {
        if (i != row && board[i][col] == num) {
            return 0; 
        }
    }
    
   
    int startRow = (row / SUBGRID) * SUBGRID;
    int startCol = (col / SUBGRID) * SUBGRID;
    for (i = 0; i < SUBGRID; i++) {
        for (j = 0; j < SUBGRID; j++) {
            int r = startRow + i;
            int c = startCol + j;
            if ((r != row || c != col) && board[r][c] == num) {
                return 0;
            }
        }
    }
    
    return 1; 
}


void copyBoard(int source[SIZE][SIZE], int destination[SIZE][SIZE]) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            destination[i][j] = source[i][j];
        }
    }
}

void shuffleArray(int arr[], int size) {
    for (int i = size - 1; i > 0; i--) {
        int j = rand() % (i + 1);
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


void generateSolvedBoard(int board[SIZE][SIZE]) {
    int i, j, index;
    int templateBoard[SIZE][SIZE] = {
        {1, 2, 3, 4, 5, 6, 7, 8, 9},
        {4, 5, 6, 7, 8, 9, 1, 2, 3},
        {7, 8, 9, 1, 2, 3, 4, 5, 6},
        {2, 3, 4, 5, 6, 7, 8, 9, 1},
        {5, 6, 7, 8, 9, 1, 2, 3, 4},
        {8, 9, 1, 2, 3, 4, 5, 6, 7},
        {3, 4, 5, 6, 7, 8, 9, 1, 2},
        {6, 7, 8, 9, 1, 2, 3, 4, 5},
        {9, 1, 2, 3, 4, 5, 6, 7, 8}
    };
    
  
    copyBoard(templateBoard, board);
    

    int numbers[SIZE] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    shuffleArray(numbers, SIZE);
    
    
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            board[i][j] = numbers[templateBoard[i][j] - 1];
        }
    }
    
   
    for (int block = 0; block < 3; block++) {
        for (int iter = 0; iter < 3; iter++) {
            int row1 = block * 3 + rand() % 3;
            int row2 = block * 3 + rand() % 3;
            
            if (row1 != row2) {
                for (j = 0; j < SIZE; j++) {
                    int temp = board[row1][j];
                    board[row1][j] = board[row2][j];
                    board[row2][j] = temp;
                }
            }
        }
    }
    
 
    for (int block = 0; block < 3; block++) {
        for (int iter = 0; iter < 3; iter++) {
            int col1 = block * 3 + rand() % 3;
            int col2 = block * 3 + rand() % 3;
            
            if (col1 != col2) {
                for (i = 0; i < SIZE; i++) {
                    int temp = board[i][col1];
                    board[i][col1] = board[i][col2];
                    board[i][col2] = temp;
                }
            }
        }
    }
    
    
    for (int iter = 0; iter < 3; iter++) {
        int blockRow1 = rand() % 3;
        int blockRow2 = rand() % 3;
        
        if (blockRow1 != blockRow2) {
            for (i = 0; i < 3; i++) {
                for (j = 0; j < SIZE; j++) {
                    int temp = board[blockRow1 * 3 + i][j];
                    board[blockRow1 * 3 + i][j] = board[blockRow2 * 3 + i][j];
                    board[blockRow2 * 3 + i][j] = temp;
                }
            }
        }
    }
    
  
    for (int iter = 0; iter < 3; iter++) {
        int blockCol1 = rand() % 3;
        int blockCol2 = rand() % 3;
        
        if (blockCol1 != blockCol2) {
            for (i = 0; i < SIZE; i++) {
                for (j = 0; j < 3; j++) {
                    int temp = board[i][blockCol1 * 3 + j];
                    board[i][blockCol1 * 3 + j] = board[i][blockCol2 * 3 + j];
                    board[i][blockCol2 * 3 + j] = temp;
                }
            }
        }
    }
}


void createPuzzle(int solvedBoard[SIZE][SIZE], int puzzleBoard[SIZE][SIZE]) {
    int i, j;
    int cellsToRemove = SIZE * SIZE - NUM_HINTS;
    
 
    copyBoard(solvedBoard, puzzleBoard);
    

    int removed = 0;
    while (removed < cellsToRemove) {
 
        i = rand() % SIZE;
        j = rand() % SIZE;
        
   
        if (puzzleBoard[i][j] != 0) {
            puzzleBoard[i][j] = 0;
            removed++;
        }
    }
}


void generateRandomBoards(int boards[NUM_BOARDS][SIZE][SIZE], int solutions[NUM_BOARDS][SIZE][SIZE]) {
    int i;
    int solvedBoard[SIZE][SIZE];
    
    for (i = 0; i < NUM_BOARDS; i++) {
        generateSolvedBoard(solvedBoard);
        copyBoard(solvedBoard, solutions[i]); 
        createPuzzle(solvedBoard, boards[i]);  
    }
}


int isBoardComplete(int board[SIZE][SIZE]) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (board[i][j] == 0) {
                return 0;
            }
        }
    }
    

    for (i = 0; i < SIZE; i++) {
        int used[SIZE + 1] = {0};
        for (j = 0; j < SIZE; j++) {
            int num = board[i][j];
            if (used[num]) {
                return 0; 
            }
            used[num] = 1;
        }
    }
    
    
    for (j = 0; j < SIZE; j++) {
        int used[SIZE + 1] = {0};
        for (i = 0; i < SIZE; i++) {
            int num = board[i][j];
            if (used[num]) {
                return 0; 
            }
            used[num] = 1;
        }
    }
    

    for (int blockRow = 0; blockRow < 3; blockRow++) {
        for (int blockCol = 0; blockCol < 3; blockCol++) {
            int used[SIZE + 1] = {0};
            for (i = 0; i < 3; i++) {
                for (j = 0; j < 3; j++) {
                    int num = board[blockRow * 3 + i][blockCol * 3 + j];
                    if (used[num]) {
                        return 0; 
                    }
                    used[num] = 1;
                }
            }
        }
    }
    
    return 1; 
}


int areEqual(int board1[SIZE][SIZE], int board2[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (board1[i][j] != board2[i][j]) {
                return 0;
            }
        }
    }
    return 1;
}


void waitForEnter() {
    printf("\nApasă Enter pentru a continua...");
    int c;
    while ((c = getchar()) != '\n' && c != EOF) { }
    getchar();
}


void playSudoku(int boards[NUM_BOARDS][SIZE][SIZE], int solutions[NUM_BOARDS][SIZE][SIZE]) {
    int selectedBoard[SIZE][SIZE];
    int originalBoard[SIZE][SIZE];
    int choice, row, col, num;
    int playing = 1;
    char input;
    int currentBoardIndex = 0;
    

    printf("Table disponibile:\n\n");
    int i;
    for (i = 0; i < NUM_BOARDS; i++) {
        printf("Tabla %d:\n", i + 1);
        printBoard(boards[i]);
        printf("\n");
    }
    
    
    do {
        printf("Alege o tablă (1-%d): ", NUM_BOARDS);
        scanf("%d", &choice);
    } while (choice < 1 || choice > NUM_BOARDS);
    
    currentBoardIndex = choice - 1;
    

    copyBoard(boards[currentBoardIndex], selectedBoard);
    copyBoard(boards[currentBoardIndex], originalBoard);
    

    while (playing) {
        printf("Tabla Sudoku #%d:\n", currentBoardIndex + 1);
        printBoard(selectedBoard);
        
        printf("\nOpțiuni:\n");
        printf("1. Fă o mutare\n");
        printf("2. Verifică dacă tabla este corectă\n");
        printf("3. Resetează tabla\n");
        printf("4. Vezi soluția\n");
        printf("5. Selectează o altă tablă\n");
        printf("6. Ieșire\n");
        printf("Alege opțiunea: ");
        scanf("%d", &choice);
        
        if (choice == 1) {
            printf("Introdu rândul (1-9): ");
            scanf("%d", &row);
            printf("Introdu coloana (1-9): ");
            scanf("%d", &col);
            
            row--;
            col--;
            

            if (row < 0 || row >= SIZE || col < 0 || col >= SIZE) {
                printf("Rând sau coloană invalidă.");
                waitForEnter();
            } else if (originalBoard[row][col] != 0) {
                printf("Nu poți modifica celulele predefinite!");
                waitForEnter();
            } else {
                printf("Introdu numărul (1-9, 0 pentru a șterge): ");
                scanf("%d", &num);
                
                if (num < 0 || num > 9) {
                    printf("Număr invalid.");
                    waitForEnter();
                } else if (num != 0 && !isValidMove(selectedBoard, row, col, num)) {
                    printf("Mutare invalidă! Aceasta ar încălca regulile Sudoku.\n");
                    printf("Dorești să plasezi oricum? (y/n): ");
                    

                    int c;
                    while ((c = getchar()) != '\n' && c != EOF) { }
                    
                    input = getchar();
                    
                    if (input == 'y' || input == 'Y') {
                        selectedBoard[row][col] = num;
                    }
                    

                    while ((c = getchar()) != '\n' && c != EOF) { }
                } 
                
                else {
                    selectedBoard[row][col] = num;
                }
            }
        } 
        
        else if (choice == 2) {
            if (isBoardComplete(selectedBoard)) {
                printf("\nFelicitări! Soluția ta este corectă!\n");

                printf("\nBine ai venit la Sudoku Shop!\n");
                printf("\nCe ai dori să cumperi?\n");
                printf("1. Clues Type 1\n");
                printf("2. Clues Type 2\n");
                printf("3. Clues Type 3\n");
 
                int shopChoice;
                scanf("%d", &shopChoice);

                switch (shopChoice) {
                    case 1:
                        printf("Ai ales Clues Type 1.\n");
                        break;
                    case 2:
                        printf("Ai ales Clues Type 2.\n");
                        break;
                    case 3:
                        printf("Ai ales Clues Type 3.\n");
                        break;
                    default:
                        printf("Opțiune invalidă.\n");
                        break;
                }
            } 
        
        else {
        printf("\nTabla nu este completă sau are erori.\n");
    }
    waitForEnter();
}
        
        else if (choice == 3) {
            copyBoard(originalBoard, selectedBoard);
            printf("\nTabla a fost resetată.");
            waitForEnter();
        } 
        
        else if (choice == 4) {
            printf("\nSoluția pentru Tabla %d:\n", currentBoardIndex + 1);
            printBoard(solutions[currentBoardIndex]);
            waitForEnter();
        } 
        
        else if (choice == 5) {
            printf("Table disponibile:\n\n");
            for (i = 0; i < NUM_BOARDS; i++) {
                printf("Tabla %d:\n", i + 1);
                printBoard(boards[i]);
                printf("\n");
            }
            

            do {
                printf("Alege o tablă (1-%d): ", NUM_BOARDS);
                scanf("%d", &choice);
            } while (choice < 1 || choice > NUM_BOARDS);
            
            currentBoardIndex = choice - 1;
            copyBoard(boards[currentBoardIndex], selectedBoard);
            copyBoard(boards[currentBoardIndex], originalBoard);
        } 
        
        else if (choice == 6) {
            playing = 0;
        } 
        
        else {
            printf("\nOpțiune invalidă.");
            waitForEnter();
        }
    }
}

int main() {
    int boards[NUM_BOARDS][SIZE][SIZE];
    int solutions[NUM_BOARDS][SIZE][SIZE];

    srand(time(NULL));
    
    printf("Se generează table aleatorii de Sudoku...\n");
    generateRandomBoards(boards, solutions);

    printf("Bine ați venit la Sudoku!\n");
    playSudoku(boards, solutions);
    
    printf("Mulțumim pentru joc!\n");
    return 0;
}
